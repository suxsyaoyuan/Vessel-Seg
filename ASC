import torch
import torch.nn as nn
import torch.nn.functional as F

class SingleConvLayer(nn.Module):
    def __init__(self, ch_in, ch_out, kernel_size=3, stride=1, padding=1, dilation=1, groups=1, bias=True):
        super(SingleConvLayer, self).__init__()
        self.conv = nn.Sequential(
            nn.Conv2d(ch_in, ch_out, kernel_size, stride, padding, dilation, groups, bias),
            nn.BatchNorm2d(ch_out),
            nn.ReLU(inplace=True)
        )

    def forward(self, x):
        return self.conv(x)


class ASCModule(nn.Module):
    """
        The adaptive scale context (ASC) module described in paper.
    """

    def __init__(self, ch_in, ch_out):
        super(ASCModule, self).__init__()
        self.conv1 = SingleConvLayer(ch_in, ch_out // 3, 3, 1, 1, 1, 1, True)
        self.conv2 = SingleConvLayer(ch_in, ch_out // 3, 3, 1, 3, 3, 1, True)
        self.conv3 = SingleConvLayer(ch_in, ch_out // 3, 3, 1, 5, 5, 1, True)
        self.conv123 = SingleConvLayer(ch_out, ch_out, 3, 1, 1, 1, 1, True)
        self.se = Attention_Block(ch_out,ratio=16)

    def forward(self, x):
        x1 = self.conv1(x)
        x2 = self.conv2(x)
        x3 = self.conv3(x)
        x123 = self.conv123(torch.cat((x1, x2, x3), dim=1))
        return self.se(x123)
